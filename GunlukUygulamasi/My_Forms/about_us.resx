<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        yPl//mhqyMbIzWQAAAAASUVORK5CYII=
</value>
  </data>
</root>